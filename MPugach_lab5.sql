ALTER TABLE Заказы
DROP CONSTRAINT Заказы_Меню

GO

ALTER TABLE Заказы
DROP CONSTRAINT Заказы_Сотрудники

GO

ALTER TABLE Сотрудники
DROP CONSTRAINT Сотрудники_Должность

GO

ALTER TABLE Блюда_в_доставке
DROP CONSTRAINT Блюда_в_доставке_Заказ_с_доставкой

GO

ALTER TABLE Блюда_в_доставке
DROP CONSTRAINT Блюда_в_доставке_Меню

GO

ALTER TABLE Меню
DROP CONSTRAINT Меню_Блюда

GO

ALTER TABLE Ингредиенты_в_составе
DROP CONSTRAINT Ингредиенты_в_составе_Блюда

GO

ALTER TABLE Ингредиенты_в_составе
DROP CONSTRAINT Ингредиенты_в_составе_Ингредиенты

GO

ALTER TABLE Закупка
DROP CONSTRAINT Закупка_Ингредиенты

GO

ALTER TABLE Закупка
DROP CONSTRAINT Закупка_Поставщики

GO

ALTER TABLE Должность
DROP CONSTRAINT UNIQUE_Должность_Должность

GO

ALTER TABLE Меню
DROP CONSTRAINT CHECK_Меню_Цена_блюда

GO

/*
ЛАБОРАТОРНАЯ РАБОТА №5
«Создание таблиц с помощью SQL-запросов»

В отчете должен быть представлен текст SQL-запросов для создания всех таблиц разработанной базы данных.
Также в CREATE TABLE должны быть определены значения полей по умолчанию, 
ограничения уникальности и проверочные ограничения 
(в CREATE TABLE для базы данных должно быть определено хотя бы по одному ограничению каждого вида).
*/

DROP TABLE Сотрудники
GO

DROP TABLE Должность
GO

DROP TABLE Заказы
GO

DROP TABLE Меню
GO

DROP TABLE Блюда
GO

DROP TABLE Блюда_в_доставке
GO

DROP TABLE Заказ_с_доставкой
GO

DROP TABLE Ингредиенты_в_составе
GO

DROP TABLE Поставщики
GO

DROP TABLE Закупка
GO

DROP TABLE Ингредиенты
GO

CREATE TABLE Сотрудники
(
	  Код int IDENTITY PRIMARY KEY
	, ФИО nvarchar(40) NOT NULL
	, Код_должность int NOT NULL
)

GO

CREATE TABLE Должность
(
	  Код int IDENTITY PRIMARY KEY
	, Должность nvarchar(20) NOT NULL /*UNIQUE*/
)

GO

CREATE TABLE Заказы
(
	  Код int IDENTITY PRIMARY KEY
	, Код_сотрудника int NOT NULL
	, Код_меню int NOT NULL
	, Дата date NOT NULL
	, Время time(0) NOT NULL
	, Номер_столика int NOT NULL
	, Количество int NOT NULL
)

GO

CREATE TABLE Меню
(
	  Код int IDENTITY PRIMARY KEY
	, Код_блюда int NOT NULL
	, Цена_блюда money NOT NULL DEFAULT 30 /*CHECK(Цена_блюда > 0)*/
	, Дата date NOT NULL
)

GO

CREATE TABLE Блюда
(
	  Код int IDENTITY PRIMARY KEY
	, Название_блюда nvarchar(30) NOT NULL UNIQUE
	, Единица_измерения nvarchar(10) NOT NULL
)

GO

CREATE TABLE Блюда_в_доставке
(
	  Код int IDENTITY PRIMARY KEY
	, Код_меню int NOT NULL
	, Код_заказа_с_доставкой int NOT NULL
	, Количество int NOT NULL DEFAULT 3 CHECK(Количество > 0)
)

GO

CREATE TABLE Заказ_с_доставкой
(
	  Код int IDENTITY PRIMARY KEY
	, Адрес nvarchar(40) NOT NULL
	, Телефон nvarchar(14) NOT NULL
	, Дата date NOT NULL
)

GO

CREATE TABLE Ингредиенты_в_составе
(
	  Код int IDENTITY PRIMARY KEY
	, Код_ингредиента int NOT NULL
	, Код_блюда int NOT NULL
	, Количество int NOT NULL DEFAULT 1 CHECK(Количество > 0)
)

GO

CREATE TABLE Поставщики
(
	  Код int IDENTITY PRIMARY KEY
	, Название nvarchar(40) NOT NULL
	, Адрес nvarchar(40) NOT NULL
	, Телефон nvarchar(12) NOT NULL
)

GO

CREATE TABLE Закупка
(
	  Код int IDENTITY PRIMARY KEY
	, Код_ингредиента int NOT NULL
	, Количество int NOT NULL DEFAULT 1 CHECK(Количество > 0)
	, Код_поставщика int NOT NULL
	, Дата date NOT NULL
	, Цена money NOT NULL DEFAULT 1 CHECK(Цена > 0)
)

GO

CREATE TABLE Ингредиенты
(
	  Код int IDENTITY PRIMARY KEY
	, Название nvarchar(25) NOT NULL
	, Единица_измерения nvarchar(10) NOT NULL
)

GO
/*
ЛАБОРАТОРНАЯ РАБОТА №7
«Определение связей между таблицами с помощью SQL запросов»
В отчете должен быть представлен текст SQL-запросов для определения связей между таблицами
(ALTER TABLE + CONSTRAINT).
Также в ALTER TABLE должны быть определены ограничения уникальности и проверочные ограничения
(в ALTER TABLE для базы данных должно быть определено хотя бы по одному ограничению каждого вида).
*/
ALTER TABLE Заказы
ADD CONSTRAINT Заказы_Сотрудники FOREIGN KEY (Код_сотрудника)
REFERENCES Сотрудники(Код)

GO

ALTER TABLE Заказы
ADD CONSTRAINT Заказы_Меню FOREIGN KEY (Код_меню)
REFERENCES Меню(Код)

GO

ALTER TABLE Сотрудники
ADD CONSTRAINT Сотрудники_Должность FOREIGN KEY (Код_должность)
REFERENCES Должность(Код)

GO

ALTER TABLE Меню
ADD CONSTRAINT Меню_Блюда FOREIGN KEY (Код_блюда)
REFERENCES Блюда(Код)

GO

ALTER TABLE Блюда_в_доставке
ADD CONSTRAINT Блюда_в_доставке_Меню FOREIGN KEY (Код_меню)
REFERENCES Меню(Код)

GO

ALTER TABLE Блюда_в_доставке
ADD CONSTRAINT Блюда_в_доставке_Заказ_с_доставкой FOREIGN KEY (Код_заказа_с_доставкой)
REFERENCES Заказ_с_доставкой(Код)

GO

ALTER TABLE Ингредиенты_в_составе
ADD CONSTRAINT Ингредиенты_в_составе_Блюда FOREIGN KEY (Код_блюда)
REFERENCES Блюда(Код)

GO

ALTER TABLE Ингредиенты_в_составе
ADD CONSTRAINT Ингредиенты_в_составе_Ингредиенты FOREIGN KEY (Код_ингредиента)
REFERENCES Ингредиенты(Код)

GO

ALTER TABLE Закупка
ADD CONSTRAINT Закупка_Ингредиенты FOREIGN KEY (Код_ингредиента)
REFERENCES Ингредиенты(Код)

GO

ALTER TABLE Закупка
ADD CONSTRAINT Закупка_Поставщики FOREIGN KEY (Код_поставщика)
REFERENCES Поставщики(Код)

GO

ALTER TABLE Должность
ADD CONSTRAINT UNIQUE_Должность_Должность UNIQUE(Должность)

GO


ALTER TABLE Меню
ADD CONSTRAINT CHECK_Меню_Цена_блюда CHECK(Цена_блюда > 0)

GO

/*
ЛАБОРАТОРНАЯ РАБОТА №8
«Использование SQL-запросов для модификации данных»
В отчете должен быть представлен текст SQL-запросов для занесения данных в базу данных –
INSERT INTO…VALUES, модификации записи в какой-либо одной таблице – UPDATE,
удаления записи из какой-либо таблицы – DELETE.
В результате выполнения работы в каждую таблицу должно быть занесено не менее 2-х записей,
в каждую дочернюю таблицу должно быть занесено больше записей,
чем в любую из её родительских таблиц.
*/

INSERT INTO Должность VALUES('Бариста')
GO

INSERT INTO Должность VALUES('Бармен')
GO

INSERT INTO Должность VALUES('Официант')
GO

INSERT INTO Должность VALUES('Кассир')
GO

INSERT INTO Должность VALUES('Управляющий')
GO

INSERT INTO Должность VALUES('Повар')
GO

INSERT INTO Сотрудники VALUES ('Соловьёв Корнелий Александрович', 2)
GO

INSERT INTO Сотрудники VALUES ('Майборода Карл Андреевич', 3)
GO

INSERT INTO Сотрудники VALUES ('Терещенко Савва Эдуардович', 2)
GO

INSERT INTO Сотрудники VALUES ('Костин Юлиан Борисович', 1)
GO

INSERT INTO Сотрудники VALUES ('Крюкова Елизавета Фёдоровна', 3)
GO

INSERT INTO Сотрудники VALUES ('Майборода Инна Викторовна', 5)
GO

INSERT INTO Сотрудники VALUES ('Кудряшова Ева Эдуардовна', 1)
GO

INSERT INTO Сотрудники VALUES ('Медведева Владлена Александровна', 3)
GO

INSERT INTO Сотрудники VALUES ('Абрамова Жанна Ярославовна', 4)
GO

INSERT INTO Заказ_с_доставкой VALUES ('ул.Советская, 34', '+375333340111', '20191014')
GO

INSERT INTO Заказ_с_доставкой VALUES ('ул.Кирова, 14', '+375293832900', '20191012')
GO

INSERT INTO Заказ_с_доставкой VALUES ('ул.Оскина, 14', '+375291795744', '20191009')
GO

INSERT INTO Заказ_с_доставкой VALUES ('ул.Мира, 113а', '+375334567890', '20191011')
GO

INSERT INTO Заказ_с_доставкой VALUES ('ул.Барыкина, 1', '+375445612978', '20191021')
GO

INSERT INTO Блюда VALUES ('Ролл с курицей', 'грамм')
GO

INSERT INTO Блюда VALUES ('Рулетики с корицей', 'штук')
GO

INSERT INTO Блюда VALUES ('Капкейки с лимонным кремом', 'штук')
GO

INSERT INTO Блюда VALUES ('Вырезка говядины на гриле', 'грамм')
GO

INSERT INTO Блюда VALUES ('Свинина на кости гриль', 'грамм')
GO

INSERT INTO Блюда VALUES ('Утиное филе', 'грамм')
GO

INSERT INTO Блюда VALUES ('Жареные мясные шарики', 'грамм')
GO

INSERT INTO Блюда VALUES ('Салат Цезарь', 'грамм')
GO

INSERT INTO Блюда VALUES ('Греческий салат', 'грамм')
GO

INSERT INTO Блюда VALUES ('Куриный бульон', 'грамм')
GO

INSERT INTO Меню VALUES (1, 500, '20191008')
GO

INSERT INTO Меню VALUES (2, 300, '20191008')
GO

INSERT INTO Меню VALUES (3, 150, '20191008')
GO

INSERT INTO Меню VALUES (4, 100, '20191007')
GO

INSERT INTO Меню VALUES (5, 700, '20191009')
GO

INSERT INTO Меню VALUES (6, 650, '20191008')
GO

INSERT INTO Меню VALUES (7, 210, '20191005')
GO

INSERT INTO Меню VALUES (8, 400, '20191008')
GO

INSERT INTO Меню VALUES (9, 400, '20191008')
GO

INSERT INTO Меню VALUES (10, 70, '20191008')
GO

INSERT INTO Меню VALUES (3, 160, '20191027')
GO

INSERT INTO Блюда_в_доставке VALUES (1, 1, 1)
GO

INSERT INTO Блюда_в_доставке VALUES (2, 1, 3)
GO

INSERT INTO Блюда_в_доставке VALUES (1, 2, 4)
GO

INSERT INTO Блюда_в_доставке VALUES (4, 2, 1)
GO

INSERT INTO Блюда_в_доставке VALUES (10, 3, 1)
GO

INSERT INTO Блюда_в_доставке VALUES (9, 3, 3)
GO

INSERT INTO Блюда_в_доставке VALUES (6, 4, 2)
GO

INSERT INTO Блюда_в_доставке VALUES (7, 4, 1)
GO

INSERT INTO Блюда_в_доставке VALUES (1, 5, 2)
GO

INSERT INTO Блюда_в_доставке VALUES (3, 5, 5)
GO

INSERT INTO Блюда_в_доставке VALUES (9, 3, 1)
GO

INSERT INTO Блюда_в_доставке VALUES (5, 3, 1)
GO

INSERT INTO Заказы VALUES (2, 1, '20191008', '10:30', 1, 1)
GO

INSERT INTO Заказы VALUES (2, 8, '20191008', '11:00', 1, 2)
GO

INSERT INTO Заказы VALUES (2, 10, '20191008', '11:20', 1, 1)
GO

INSERT INTO Заказы VALUES (5, 1, '20191008', '10:30', 1, 1)
GO

INSERT INTO Заказы VALUES (5, 1, '20191008', '10:30', 1, 1)
GO

INSERT INTO Заказы VALUES (5, 1, '20191008', '10:30', 1, 1)
GO

INSERT INTO Заказы VALUES (5, 1, '20191008', '10:30', 1, 2)
GO

INSERT INTO Заказы VALUES (5, 1, '20191008', '11:40', 2, 1)
GO

INSERT INTO Заказы VALUES (8, 1, '20191008', '12:30', 1, 3)
GO

INSERT INTO Заказы VALUES (8, 1, '20191009', '10:30', 1, 5)
GO

INSERT INTO Заказы VALUES (8, 1, '20191009', '10:50', 2, 5)
GO

INSERT INTO Заказы VALUES (8, 1, '20191009', '10:30', 1, 1)
GO

INSERT INTO Заказы VALUES (9, 1, '20191017', '17:30', 1, 1)
GO

INSERT INTO Ингредиенты VALUES ('Лаваш', 'штук')
GO

INSERT INTO Ингредиенты VALUES ('Филе куриное', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Свинина', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Утка', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Сыр', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Зелень', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Капуста', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Вода', 'мл')
GO

INSERT INTO Ингредиенты VALUES ('Морковка', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Соус', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Жидкий дым', 'мл')
GO

INSERT INTO Ингредиенты VALUES ('Яйца', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Лимон', 'штук')
GO

INSERT INTO Ингредиенты VALUES ('Масло', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Мука', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Корица', 'грамм')
GO

INSERT INTO Ингредиенты VALUES ('Говядина', 'грамм')
GO

INSERT INTO Ингредиенты_в_составе VALUES (1, 1, 320)
GO

INSERT INTO Ингредиенты_в_составе VALUES (2, 2, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (3, 4, 400)
GO

INSERT INTO Ингредиенты_в_составе VALUES (4, 6, 100)
GO

INSERT INTO Ингредиенты_в_составе VALUES (5, 3, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (6, 1, 120)
GO

INSERT INTO Ингредиенты_в_составе VALUES (7, 2, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (8, 9, 100)
GO

INSERT INTO Ингредиенты_в_составе VALUES (9, 10, 50)
GO

INSERT INTO Ингредиенты_в_составе VALUES (10, 1, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (11, 4, 222)
GO

INSERT INTO Ингредиенты_в_составе VALUES (12, 3, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (13, 9, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (14, 1, 30)
GO

INSERT INTO Ингредиенты_в_составе VALUES (15, 2, 20)
GO

INSERT INTO Ингредиенты_в_составе VALUES (16, 2, 10)
GO

INSERT INTO Ингредиенты_в_составе VALUES (17, 8, 5)
GO

INSERT INTO Ингредиенты_в_составе VALUES (5, 8, 40)
GO

INSERT INTO Ингредиенты_в_составе VALUES (3, 1, 75)
GO

INSERT INTO Ингредиенты_в_составе VALUES (15, 1, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (12, 2, 200)
GO

INSERT INTO Ингредиенты_в_составе VALUES (11, 7, 1)
GO

INSERT INTO Ингредиенты_в_составе VALUES (1, 1, 2)
GO

INSERT INTO Ингредиенты_в_составе VALUES (13, 1, 3)
GO

INSERT INTO Ингредиенты_в_составе VALUES (14, 4, 54)
GO

INSERT INTO Поставщики VALUES ('ИП Иванушка', 'г.Зябровка', '23-14-56')
GO

INSERT INTO Поставщики VALUES ('ИП Радуга вкуса', 'г.Мозырь', '33-12-14')
GO

INSERT INTO Поставщики VALUES ('ОАО Милковита', 'г.Гомель', '23-64-35')
GO

INSERT INTO Поставщики VALUES ('Колхоз Малинина', 'г.Мозырь', '34-65-78')
GO

INSERT INTO Поставщики VALUES ('ОАО Евроопт', 'г.Минск', '45-65-90')
GO

INSERT INTO Закупка VALUES (1, 150, 5, '20191011', 300)
GO

INSERT INTO Закупка VALUES (2, 200, 1, '20191011', 150)
GO

INSERT INTO Закупка VALUES (3, 150, 2, '20191011', 200)
GO

INSERT INTO Закупка VALUES (4, 300, 3, '20191011', 3000)
GO

INSERT INTO Закупка VALUES (5, 450, 4, '20191011', 320)
GO

INSERT INTO Закупка VALUES (6, 1000, 5, '20191011', 123)
GO

INSERT INTO Закупка VALUES (7, 150, 2, '20191011', 234)
GO

INSERT INTO Закупка VALUES (8, 150, 3, '20191011', 900)
GO

INSERT INTO Закупка VALUES (9, 15, 4, '20191011', 399)
GO

INSERT INTO Закупка VALUES (10, 10, 5, '20191011', 989)
GO

INSERT INTO Закупка VALUES (11, 50, 1, '20191011', 234)
GO

INSERT INTO Закупка VALUES (12, 30, 2, '20191012', 300)
GO

INSERT INTO Закупка VALUES (13, 55, 3, '20191011', 300)
GO

INSERT INTO Закупка VALUES (14, 112, 3, '20191015', 750)
GO

INSERT INTO Закупка VALUES (15, 1, 1, '20191010', 680)
GO

INSERT INTO Закупка VALUES (17, 80, 5, '20191010', 332)
GO

INSERT INTO Закупка VALUES (16, 90, 1, '20191010', 123)
GO

INSERT INTO Закупка VALUES (3, 150, 5, '20191023', 300)
GO

DELETE FROM Заказы
WHERE Дата = '20191017'
GO

UPDATE Закупка
SET  Количество += 10
WHERE Код_поставщика = 1
GO
/*
ЛАБОРАТОРНАЯ РАБОТА №9
«Создание представлений (view)»
В отчете должен быть представлен текст SQL-запроса для создания представления.
Запрос в представлении должен возвращать данные не менее чем из 2-х таблиц базы данных
(представление на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается).
Отчет также должен содержать скриншот по выполнению запроса с использованием представления
в среде Management Studio.
*/
/*DROP VIEW ЗаказыДоступныхБлюд08102019
GO*/

/*
--параметр - без параметра 
--результат - Заказанные блюда с датой меню 08.10.2019
*/
/*
CREATE VIEW ЗаказыДоступныхБлюд08102019
AS
SELECT Заказы.Код as КодЗаказа, Заказы.Дата as ДатаЗаказа, Номер_столика, Цена_блюда, Блюда.Название_блюда
FROM Заказы, Меню, Блюда
WHERE Меню.Код = Заказы.Код_меню and Меню.Код_блюда = Блюда.Код and Меню.Дата = '20191008'
GO

SELECT *
FROM ЗаказыДоступныхБлюд08102019
GO
*/

/*
ЛАБОРАТОРНАЯ РАБОТА № 11
«Создание простейшей хранимой процедуры на SQL-сервере»
В отчете должен быть представлен текст SQL-запроса для создания параметризованной хранимой процедуры.
Процедура должна воспринимать параметр – код объекта из какой-либо родительской таблицы базы данных и
возвращать соответствующие записи из какой-либо дочерней таблицы (например, получать код студента
и возвращать его оценки).
Процедура на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается.
Также в отчете должен быть представлен скриншот по вызову разработанной процедуры в среде Management Studio.
*/

DROP PROCEDURE БлюдаВМеню
GO

--параметр - Цена
--результат - Перечень доступных блюд по данной цене

CREATE PROCEDURE БлюдаВМеню @Цена INT
AS
SELECT Название_блюда, Цена_блюда, Дата
FROM Меню, Блюда
WHERE Меню.Код_блюда = Блюда.Код and Цена_блюда = @Цена
GO

/*EXEC БлюдаВМеню 400
GO*/

/*
ЛАБОРАТОРНАЯ РАБОТА № 13
«Создание параметризованной хранимой процедуры на SQL-сервере»
В отчете должен быть представлен текст SQL-запроса для создания параметризованной хранимой процедуры.
Процедура должна воспринимать 2 параметра – значения не ключевых полей двух родительских таблиц,
по которым выполняется отбор записей дочерней таблицы, и возвращать соответствующие записи дочерней таблицы
(например, получать фамилию преподавателя и фамилию студента, а возвращать оценки, выставленные заданным преподавателем указанному студенту).
Для параметров должны быть указаны значения по умолчанию (не NULL).
Если при вызове процедуры задано значение параметра NULL,
отбор записей по этому параметру выполняться не должен
(например, если в качестве фамилии преподавателя задано значение NULL,
то должны быть возвращены все оценки заданного студента). Проверка значения NULL в параметрах
должна выполняться в операторах IF, а не в условиях запросов.
Результирующий набор данных должен содержать все поля дочерней таблицы и поля родительских таблиц,
по которым выполняется отбор записей (всегда один и тот же набор полей, даже если отбор по полям
не выполняется).
Процедура на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается.
В отчете также должны быть представлены скриншоты по вызову разработанной процедуры в среде
Management Studio. Должны быть получены результаты при всех сочетаниях NULL / NOT NULL в параметрах,
использованы позиционная, ключевая и смешанная формы задания параметров,
использовано наличие значений по умолчанию.
*/

DROP PROCEDURE ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда
GO

/*
--Параметр НазваниеБлюда из таблицы Блюда
--Параметр НазваниеИнгредиента из таблицы Ингредиенты
--Результат Ингредиенты в составе по названию ингредиента и по названию блюда
*/

CREATE PROCEDURE ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда @НазваниеБлюда varchar(40) = 'Салат Цезарь',
				@НазваниеИнгредиента varchar(40) = 'Говядина'
AS
begin
  if @НазваниеБлюда is null
    if @НазваниеИнгредиента is null
      SELECT Ингредиенты_в_составе.Код as КодИнгрединтаВСоставе, Код_ингредиента, Код_блюда, Название_блюда,
			Название as Название_ингредиента, Количество
      FROM Блюда, Ингредиенты_в_составе, Ингредиенты
      WHERE Блюда.Код = Ингредиенты_в_составе.Код_блюда and
	    Ингредиенты_в_составе.Код_ингредиента = Ингредиенты.Код
	else
	  SELECT Ингредиенты_в_составе.Код as КодИнгрединтаВСоставе, Код_ингредиента, Код_блюда, Название_блюда,
			Название as Название_ингредиента, Количество
      FROM Блюда, Ингредиенты_в_составе, Ингредиенты
      WHERE Блюда.Код = Ингредиенты_в_составе.Код_блюда and
	    Ингредиенты_в_составе.Код_ингредиента = Ингредиенты.Код and
	    @НазваниеИнгредиента = Ингредиенты.Название
  else
    if @НазваниеИнгредиента is null
      SELECT Ингредиенты_в_составе.Код as КодИнгрединтаВСоставе, Код_ингредиента, Код_блюда, Название_блюда,
			Название as Название_ингредиента, Количество
      FROM Блюда, Ингредиенты_в_составе, Ингредиенты
      WHERE Блюда.Код = Ингредиенты_в_составе.Код_блюда and
	    Ингредиенты_в_составе.Код_ингредиента = Ингредиенты.Код and
	    @НазваниеБлюда = Блюда.Название_блюда
	else
	  SELECT Ингредиенты_в_составе.Код as КодИнгрединтаВСоставе, Код_ингредиента, Код_блюда, Название_блюда,
			Название as Название_ингредиента, Количество
      FROM Блюда, Ингредиенты_в_составе, Ингредиенты
      WHERE Блюда.Код = Ингредиенты_в_составе.Код_блюда and
	    Ингредиенты_в_составе.Код_ингредиента = Ингредиенты.Код and
	    @НазваниеИнгредиента = Ингредиенты.Название and
	    @НазваниеБлюда = Блюда.Название_блюда
end
GO

/*EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда null, null
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда @НазваниеБлюда = null
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда @НазваниеБлюда = null
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда @НазваниеБлюда = null, @НазваниеИнгредиента = 'Морковка'
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда 'Вырезка говядины на гриле', 'Масло'
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда 'Греческий салат', null
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда 'Утиное филе', @НазваниеИнгредиента = 'Утка'
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда 'Салат Цезарь'
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда @НазваниеБлюда = 'Утиное филе', @НазваниеИнгредиента = null
GO

EXEC ИнгредиентыВСоставеПоНазваниюИнгредиентаПоНазваниюБлюда @НазваниеБлюда = 'Куриный бульон', @НазваниеИнгредиента = 'Морковка'
GO*/

/*
ЛАБОРАТОРНАЯ РАБОТА № 14
«Реализация цикла просмотра записей в хранимой процедуре»
В отчете должен быть представлен текст SQL-запроса для создания хранимой процедуры, обрабатывающей совокупность значений
числового поля какой-либо таблицы базы данных. В процедуре должен быть организован цикл просмотра записей таблицы
(без использования курсора) с определением некоторой числовой характеристики по совокупности значений поля. Значение
характеристики должно быть возвращено из процедуры с помощью оператора RETURN.
Варианты условий лабораторной работы приведены здесь. Если условие работы подразумевает некоторую упорядоченность записей таблицы
(например, «найти номер первого нулевого элемента последовательности»), то подразумевается, что записи упорядочены по возрастанию значения первичного ключа таблицы. Процедура может быть параметризована, в этом случае параметр в условии задачи обозначается @P.
Речь идет исключительно о цикле по записям. Не должно быть запросов с использованием группировочных функций по множеству записей,
за исключением поиска ID очередной записи.
В отчете, кроме основного условия работы, должен быть приведен текст задания в соответствии с номером варианта и дано пояснение,
какое числовое поле из какой таблицы обрабатывается.
Также в отчете должны быть представлены скриншоты по выполнению следующих действий:
1)      выполнения запроса для получения исходных данных из таблицы базы данных: поля первичного ключа и числового поля с
элементами последовательности. Данные должны быть упорядочены по значению первичного ключа;
2)      вызов разработанной процедуры в среде Management Studio с сохранением в переменной значения, возвращенного процедурой,
и отображением этого значения.
Вариант 12
Найти сумму значений элементов, находящихся за последним значением, равным @P
*/

DROP PROC СуммаКоличествВИнгредиентыВСоставе
GO

CREATE PROC СуммаКоличествВИнгредиентыВСоставе @P int
AS

--Результат - Сумма значений элементов, находящихся за последним значением, равным @P

DECLARE @id INT = (SELECT MAX(Код) FROM Ингредиенты_в_составе WHERE Количество = @P),
		@res INT = 0
SET @id = (SELECT MIN(Код) FROM Ингредиенты_в_составе WHERE Код > @id)
WHILE @id is not null
begin
  SET @res = @res + (SELECT Количество FROM Ингредиенты_в_составе WHERE Код = @id)
  SET @id = (SELECT MIN(Код) FROM Ингредиенты_в_составе WHERE Код > @id)
END
RETURN @res
GO

/*DECLARE @res INT
EXEC @res = СуммаКоличествВИнгредиентыВСоставе 200
SELECT @res AS "Сумма"*/

/*
ЛАБОРАТОРНАЯ РАБОТА № 15
«Использование временных таблиц в хранимых  процедурах»
В отчете должен быть представлен текст SQL-запроса для создания параметризованной хранимой процедуры.
Процедура должна воспринимать параметр – код объекта из какой-либо родительской таблицы базы данных и возвращать соответствующие записи
из какой-либо дочерней таблицы (например, получать код студента и возвращать его оценки).
Формирование выходных данных в процедуре должно выполняться в три этапа:
1)      занесение выходных данных во временную таблицу с помощью SELECT … INTO (например, оценок студента);
2)      модификация временной таблицы (например, удаление «двоек») c помощью UPDATE или DELETE запроса;
3)      возврат содержимого временной таблицы как результата работы процедуры.
Процедура на основе таблиц с данными по сотрудникам и должностям к рассмотрению не принимается.
В отчете также должен быть представлен скриншот по вызову разработанной процедуры в среде Management Studio.
*/

DROP PROC УвеличитьЦенуДоступныхБлюдПоКодуБлюда
GO

CREATE PROC УвеличитьЦенуДоступныхБлюдПоКодуБлюда @Код_блюда INT
--Параметр - Код_блюда
--Результат - Меню с увеличиными ценами на 10 единиц
AS
BEGIN
  SELECT Код, Код_блюда, Цена_блюда, Дата INTO #RES FROM Меню WHERE Код_блюда = @Код_блюда
  UPDATE #RES SET Цена_блюда = Цена_блюда + 10 WHERE Код_блюда = @Код_блюда
  SELECT Код AS "Код меню", Код_блюда AS "Код блюда", Цена_блюда AS "Цена блюда", Дата
  FROM #RES
END
GO

EXEC УвеличитьЦенуДоступныхБлюдПоКодуБлюда 9